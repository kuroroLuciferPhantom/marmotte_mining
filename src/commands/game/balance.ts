import { SlashCommandBuilder, ChatInputCommandInteraction, EmbedBuilder } from 'discord.js';
import { ActivityService } from '../../services/activity/ActivityService';

export const data = new SlashCommandBuilder()
  .setName('balance')
  .setDescription('Affiche votre solde en tokens et dollars');

export async function execute(interaction: ChatInputCommandInteraction, services: Map<string, any>) {
  try {
    const activityService = services.get('activity') as ActivityService;
    const databaseService = services.get('database');
    
    // Get user data
    const user = await databaseService.client.user.findUnique({
      where: { discordId: interaction.user.id }
    });

    if (!user) {
      // Rediriger vers l'inscription au lieu de cr√©er automatiquement
      const notRegisteredEmbed = new EmbedBuilder()
        .setColor(0xE74C3C)
        .setTitle('üí∞ Portefeuille non trouv√©')
        .setDescription(`**${interaction.user.displayName || interaction.user.username}**, vous n'avez pas encore de portefeuille de mineur!`)
        .addFields(
          {
            name: 'üéÆ Comment cr√©er votre portefeuille?',
            value: 'Utilisez la commande `/register` pour vous inscrire et obtenir votre premier portefeuille!',
            inline: false
          },
          {
            name: 'üéÅ Bonus d\'inscription',
            value: '‚Ä¢ üîß Machine Basic Rig gratuite\n‚Ä¢ ‚ö° 100 points d\'√©nergie\n‚Ä¢ üè† Lieu de d√©part personnel\n‚Ä¢ üí∞ Pr√™t √† commencer le minage!',
            inline: false
          },
          {
            name: 'üí° Comment gagner de l\'argent?',
            value: '‚Ä¢ **Messages Discord**: +1$ par message\n‚Ä¢ **R√©actions**: +0.5$ par r√©action\n‚Ä¢ **Vocal**: +2$/heure\n‚Ä¢ **Minage**: Tokens automatiques avec vos machines!',
            inline: false
          }
        )
        .setFooter({ text: 'Tapez /register pour commencer votre aventure!' })
        .setTimestamp();

      await interaction.reply({ embeds: [notRegisteredEmbed], ephemeral: true });
      return;
    }

    const dollarBalance = await activityService.getUserDollarBalance(interaction.user.id);

    // Calculate approximate dollar to token exchange rate
    const exchangeRate = 10; // 10$ = 1 token
    const potentialTokens = dollarBalance / exchangeRate;

    const embed = new EmbedBuilder()
      .setColor(user.tokens > 500 ? 0xFFD700 : 0x00AE86)
      .setTitle(`üí∞ Portefeuille de ${user.username}`)
      .setDescription(user.tokens > 1000 ? 'ü§ë Riche mineur!' : 'üí™ En route vers la richesse!')
      .addFields(
        { name: 'üìç Lieu', value: user.location || 'Chambre chez maman', inline: true },
        { name: 'ü™ô Tokens', value: `**${user.tokens.toFixed(2)}**`, inline: true },
        { name: 'üíµ Dollars', value: `**${dollarBalance.toFixed(2)}$**`, inline: true },
        { name: 'üìà Valeur totale', value: `~${(user.tokens + potentialTokens).toFixed(2)} tokens`, inline: true },
        { name: 'üî• Statut', value: user.miningActive ? '‚õèÔ∏è En minage' : 'üò¥ Inactif', inline: true }
      )
      .addFields(
        { 
          name: 'üîÑ Taux d\'√©change', 
          value: `${exchangeRate}$ = 1 token\nVous pouvez obtenir ~${potentialTokens.toFixed(2)} tokens`, 
          inline: false 
        },
        {
          name: 'üìä R√©partition',
          value: `ü™ô Tokens: ${((user.tokens / (user.tokens + potentialTokens)) * 100 || 0).toFixed(1)}%\nüíµ Dollars: ${((potentialTokens / (user.tokens + potentialTokens)) * 100 || 0).toFixed(1)}%`,
          inline: true
        },
        {
          name: 'üí° Prochaines √©tapes',
          value: dollarBalance >= exchangeRate ? 'üîÑ Utilisez `/exchange` pour convertir!' : user.tokens >= 100 ? '‚õèÔ∏è Achetez une machine avec `/shop`!' : 'üí¨ Chattez pour gagner des $!',
          inline: true
        }
      )
      .setFooter({ text: 'Utilisez /exchange pour convertir $ ‚Üí tokens | /help pour toutes les commandes' })
      .setTimestamp();

    await interaction.reply({ embeds: [embed] });

  } catch (error) {
    console.error('Error in balance command:', error);
    await interaction.reply({
      content: '‚ùå Une erreur est survenue lors de l\'affichage de votre solde.',
      ephemeral: true
    });
  }
}