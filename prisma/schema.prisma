// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionType {
  MINING_REWARD
  MACHINE_PURCHASE
  UPGRADE_COST
  BATTLE_REWARD
  BATTLE_ENTRY
  EVENT_REWARD
  EXCHANGE_DOLLAR_TO_TOKEN
  EXCHANGE_TOKEN_TO_DOLLAR
  ENERGY_COST          // Co√ªts √©nerg√©tiques du minage
  MAINTENANCE_COST     // Co√ªts de r√©paration des machines
  MACHINE_BREAKDOWN    // Compensation pour pannes critiques
  EFFICIENCY_BONUS     // Bonus pour machines bien entretenues
  WEAR_PENALTY         // P√©nalit√©s dues √† l'usure
  BLACK_MARKET_PURCHASE
  WEEKLY_SALARY
}

enum HousingType {
  CHAMBRE_MAMAN
  STUDIO  
  APPARTEMENT_1P
  APPARTEMENT_2P
  MAISON
  ENTREPOT
  USINE
}

enum MachineType {
  BASIC_RIG
  ADVANCED_RIG
  QUANTUM_MINER
  FUSION_REACTOR
  MEGA_FARM
}

enum BattleStatus {
  WAITING
  ACTIVE
  FINISHED
  CANCELLED
}

enum ActivityType {
  MESSAGE
  REACTION
  DAILY_LOGIN
  STREAK_BONUS
  WEEKLY_SALARY  
}

enum EventType {
  PRICE_BOOST
  MINING_BONUS
  BATTLE_FRENZY
  MAINTENANCE_FREE
  DOUBLE_REWARDS
  FLASH_SALE
}

enum AttackType {
  VIRUS_Z3_MINER      // -50% hashrate, 2h
  BLACKOUT_TARGETED   // Pause mining, 20min
  FORCED_RECALIBRATION // -25% efficacit√©, 1h
  DNS_HIJACKING       // 10% hashrate vol√©, 3h
  BRUTAL_THEFT        // Vol direct de tokens
}

enum DefenseType {
  ANTIVIRUS           // Annule virus
  BACKUP_GENERATOR    // Annule blackout
  OPTIMIZATION_SOFTWARE // R√©duit dur√©e malus 50%
  VPN_FIREWALL        // 50% √©viter attaque r√©seau
  SABOTAGE_DETECTOR   // Identifie attaquant
}

enum CardRarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
}

enum FragmentType {
  ATTACK_FRAGMENT
  DEFENSE_FRAGMENT
  RARE_FRAGMENT
}

enum MissionType {
  INFILTRATE_FARM     // Infiltrer une ferme de mining
  HACK_WAREHOUSE      // Pirater un entrep√¥t
  STEAL_BLUEPRINT     // Voler des plans
  SABOTAGE_COMPETITOR // Saboter un concurrent
  RESCUE_DATA         // R√©cup√©rer des donn√©es
}

// ============ MOD√àLES PRINCIPAUX ============

model User {
  id          String   @id @default(cuid())
  discordId   String   @unique

  username    String   // Nom d'utilisateur Discord
  location    String   @default("Chambre chez maman") // Lieu de minage
  
  // Monnaies
  dollars     Float    @default(0.0)
  tokens      Float    @default(100.0)
  
  // Mining
  miningActive        Boolean   @default(false)
  lastMiningCheck     DateTime  @default(now())
  totalMined          Float     @default(0.0)
  
  // Nouvelles statistiques d'usure et maintenance
  totalEnergySpent    Float     @default(0.0)    // Total des co√ªts √©nerg√©tiques
  totalMaintenanceSpent Float   @default(0.0)    // Total des co√ªts de maintenance
  totalMiningHours    Float     @default(0.0)    // Heures totales de minage
  machineBreakdowns   Int       @default(0)      // Nombre total de pannes
  lastMaintenanceAlert DateTime? // Derni√®re alerte de maintenance
  
  // Statistiques d'activit√© Discord
  dailyMessageCount   Int      @default(0)
  dailyReactionCount  Int      @default(0)
  dailyVoiceMinutes   Float    @default(0.0)
  lastActivityReset   DateTime @default(now())
  loginStreak         Int      @default(0)
  lastLogin           DateTime @default(now())

  housingType         HousingType @default(CHAMBRE_MAMAN)
  rentDue             DateTime?   // Prochaine √©ch√©ance de loyer
  rentOverdue         Boolean     @default(false)
  totalRentPaid       Float       @default(0.0)
  evictionWarnings    Int         @default(0)
  lastRentPayment     DateTime?
  machinesDisabled    Boolean     @default(false)
  
  // Relations
  machines            Machine[]
  transactions        Transaction[]
  battleEntries       BattleEntry[]
  activityRewards     ActivityReward[]
  eventParticipations EventParticipation[]
  attackCards         AttackCard[]
  defenseCards        DefenseCard[]
  cardFragments       CardFragment[]
  attacksLaunched     SabotageAction[] @relation("Attacker")
  attacksReceived     SabotageAction[] @relation("Target")
  sabotageDefenses    SabotageDefense[]
  sabotageImmunities  SabotageImmunity[]
  missionAttempts     MissionAttempt[]
  blackMarketPurchases BlackMarketPurchase[]
  housingHistory      HousingHistory[]
  rentPayments        RentPayment[]
  dailyStats          DailyStats[]
  battlePermissions   BattlePermission[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("users")
}

model Machine {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type        MachineType
  level       Int         @default(1)
  efficiency  Float       @default(100.0)  // 0-100%
  durability  Float       @default(100.0)  // 0-100%
  
  // Nouveaux champs
  totalMiningHours    Float   @default(0)      // Heures totales de minage
  totalEnergyConsumed Float   @default(0)      // √ânergie totale consomm√©e
  lastMaintenanceDate DateTime @default(now()) // Derni√®re maintenance
  totalRepairCost     Float   @default(0)      // Co√ªt total des r√©parations
  breakdownCount      Int     @default(0)      // Nombre de pannes
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  history     MachineHistory[]
  
  @@map("machines")
}

model MachineHistory {
  id          String   @id @default(cuid())
  machineId   String
  machine     Machine  @relation(fields: [machineId], references: [id], onDelete: Cascade)
  
  // √âtat avant/apr√®s
  oldDurability    Float
  newDurability    Float
  oldEfficiency    Float
  newEfficiency    Float
  
  // D√©tails de l'usure
  wearAmount       Float    // Montant d'usure appliqu√©
  miningTimeHours  Float    // Temps de minage qui a caus√© l'usure
  energyConsumed   Float    // √ânergie consomm√©e pendant cette p√©riode
  
  // √âv√©nements sp√©ciaux
  criticalFailure  Boolean  @default(false)
  repaired         Boolean  @default(false)
  repairCost       Float?   // Co√ªt de r√©paration si applicable
  
  timestamp   DateTime @default(now())
  
  @@map("machine_history")
}

model DailyStats {
  id            String   @id @default(cuid())
  userId        String
  date          String   // Format: "2025-06-14"
  messagesCount Int      @default(0)
  reactionsCount Int     @default(0)
  lastActivity  DateTime @default(now())
  streakDays    Int      @default(0)
  lastSalaryDate DateTime? // üÜï Pour tracker le dernier salaire r√©cup√©r√©

  user User @relation(fields: [userId], references: [discordId])

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
  @@map("daily_stats")
}

model MaintenanceAlert {
  id          String   @id @default(cuid())
  userId      String
  machineId   String
  
  alertType   String   // "LOW_DURABILITY", "CRITICAL_FAILURE", "EFFICIENCY_DROP"
  message     String
  severity    String   // "LOW", "MEDIUM", "HIGH", "CRITICAL"
  acknowledged Boolean @default(false)
  
  createdAt   DateTime @default(now())
  
  @@map("maintenance_alerts")
}

model Battle {
  id          String        @id @default(cuid())
  status      BattleStatus  @default(WAITING)
  maxPlayers  Int           @default(10)
  prizePool   Float         @default(0.0)
  startTime   DateTime?
  endTime     DateTime?
  winnerId    String?
  createdAt   DateTime      @default(now())
  
  entries BattleEntry[]

  @@map("battles")
}

model BattleEntry {
  id       String @id @default(cuid())
  battleId String
  userId   String
  position Int?
  eliminated Boolean @default(false)
  eliminatedAt DateTime?
  joinedAt DateTime @default(now())

  battle Battle @relation(fields: [battleId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([battleId, userId])
  @@map("battle_entries")
}

// ============ NOUVEAU MOD√àLE POUR LES PERMISSIONS DE BATTLE ============

model BattlePermission {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  discordId   String   // ID Discord de l'utilisateur
  username    String   // Nom d'utilisateur pour affichage
  grantedBy   String   // ID Discord de l'admin qui a accord√© la permission
  grantedAt   DateTime @default(now())
  isActive    Boolean  @default(true)
  reason      String?  // Raison optionnelle pour l'octroi de la permission
  
  @@unique([discordId])
  @@index([discordId])
  @@index([isActive])
  @@map("battle_permissions")
}

model TokenPrice {
  id        String   @id @default(cuid())
  price     Float
  timestamp DateTime @default(now())
  volume    Float    @default(0.0)
  change24h Float    @default(0.0)

  @@map("token_prices")
}

model Transaction {
  id          String          @id @default(cuid())
  userId      String
  type        TransactionType
  amount      Float
  description String
  timestamp   DateTime        @default(now())
  metadata    Json?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Cache {
  id        String    @id @default(cuid())
  key       String    @unique
  value     String
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([key])
  @@index([expiresAt])
  @@map("cache")
}


model ActivityReward {
  id         String      @id @default(cuid())
  userId     String
  type       ActivityType
  amount     Float
  multiplier Float       @default(1.0)
  createdAt  DateTime    @default(now())

  user User @relation(fields: [userId], references: [discordId])

  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@map("activity_rewards")
}

model GameEvent {
  id          String    @id @default(cuid())
  type        EventType
  title       String
  description String
  isActive    Boolean   @default(true)
  startTime   DateTime  @default(now())
  endTime     DateTime?
  multiplier  Float     @default(1.0)
  metadata    Json?

  participations EventParticipation[]

  @@map("game_events")
}

model EventParticipation {
  id        String   @id @default(cuid())
  eventId   String
  userId    String
  reward    Float    @default(0.0)
  timestamp DateTime @default(now())

  event GameEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("event_participations")
}

// ============ SYST√àME PvP SABOTAGE ============

model AttackCard {
  id          String      @id @default(cuid())
  userId      String
  type        AttackType
  rarity      CardRarity  @default(COMMON)
  quantity    Int         @default(1)
  acquiredAt  DateTime    @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("attack_cards")
}

model DefenseCard {
  id          String      @id @default(cuid())
  userId      String
  type        DefenseType
  rarity      CardRarity  @default(COMMON)
  isActive    Boolean     @default(false) // D√©fenses permanentes activ√©es
  quantity    Int         @default(1)
  acquiredAt  DateTime    @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("defense_cards")
}

model CardFragment {
  id          String        @id @default(cuid())
  userId      String
  type        FragmentType
  quantity    Int           @default(1)
  acquiredAt  DateTime      @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("card_fragments")
}

model SabotageAction {
  id          String      @id @default(cuid())
  attackerId  String
  targetId    String
  type        AttackType
  success     Boolean
  damage      Float       @default(0.0) // D√©g√¢ts inflig√©s
  duration    Int         @default(0)   // Dur√©e en minutes
  cost        Json        // Co√ªt pay√© (carte, √©nergie, etc.)
  timestamp   DateTime    @default(now())
  endTime     DateTime?   // Fin des effets
  
  // D√©tection et logs
  detected    Boolean     @default(false)
  logMessage  String?     // Message RP du sabotage

  attacker User @relation("Attacker", fields: [attackerId], references: [id], onDelete: Cascade)
  target   User @relation("Target", fields: [targetId], references: [id], onDelete: Cascade)

  @@map("sabotage_actions")
}

model SabotageDefense {
  id            String      @id @default(cuid())
  userId        String
  defenseType   DefenseType
  sabotageId    String?     // Si d√©fense contre une attaque sp√©cifique
  success       Boolean
  timestamp     DateTime    @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sabotage_defenses")
}

model SabotageImmunity {
  id        String   @id @default(cuid())
  userId    String
  endTime   DateTime // Fin de l'immunit√© post-attaque
  reason    String   // Raison de l'immunit√©

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sabotage_immunities")
}

model MissionAttempt {
  id          String        @id @default(cuid())
  userId      String
  missionType MissionType
  success     Boolean
  reward      Json?         // R√©compense obtenue
  timestamp   DateTime      @default(now())
  narrative   String?       // Texte narratif de la mission

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("mission_attempts")
}

model BlackMarketOffer {
  id          String      @id @default(cuid())
  cardType    String      // Type de carte (AttackType ou DefenseType)
  rarity      CardRarity
  price       Float       // Prix en tokens $7N1
  stock       Int         @default(1)
  refreshedAt DateTime    @default(now())
  expiresAt   DateTime    // Expiration de l'offre

  purchases BlackMarketPurchase[]

  @@map("black_market_offers")
}

model BlackMarketPurchase {
  id        String   @id @default(cuid())
  userId    String
  offerId   String
  price     Float
  timestamp DateTime @default(now())

  user  User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  offer BlackMarketOffer @relation(fields: [offerId], references: [id], onDelete: Cascade)

  @@map("black_market_purchases")
}

model HousingHistory {
  id              String      @id @default(cuid())
  userId          String
  oldHousingType  HousingType
  newHousingType  HousingType
  reason          String      // Raison du d√©m√©nagement
  cost            Float       @default(0.0)
  timestamp       DateTime    @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("housing_history")
}

model RentPayment {
  id          String      @id @default(cuid())
  userId      String
  housingType HousingType
  amount      Float
  period      String      // Format YYYY-MM
  dueDate     DateTime
  paidAt      DateTime?
  lateFee     Float       @default(0.0)
  status      String      @default("PENDING") // PENDING, PAID, OVERDUE, CANCELLED

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, period])
  @@map("rent_payments")
}